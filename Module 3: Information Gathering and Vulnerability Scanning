`dnsrecon -d <sito>` → esegue una ricognizione DNS sul dominio indicato (ricerca di record, sottodomini e possibili informazioni DNS).
`dig <sito>` → interroga i server DNS per ottenere i record DNS del dominio (A, AAAA, CNAME, ecc.).
`dig <sito> mx` → interroga i record MX (mail exchanger) del dominio.
`whois <sito>` → restituisce le informazioni WHOIS pubbliche del dominio (registrante, date, registrar, contatti se disponibili).
`whois <sito> | grep '@sito.com'` → estrae (filtra) dalla risposta WHOIS eventuali stringhe contenenti `@sito.com` (es. email presenti nei dati WHOIS).
`host <sito>` → risolve il nome host mostrando record DNS base (A, MX, PTR a seconda dell'argomento).
`whois <ip> | grep OrgName` → mostra dalla query WHOIS sull'IP la riga contenente il nome dell'organizzazione (OrgName).

`You can obtain detailed information about certificate transparency from https://certificate.transparency.dev.` → indicazione di risorsa: sito che spiega Certificate Transparency (log di certificati, come funzionano e come consultarli).

`(pip3 install h8mail) h8mail -h` → `pip3 install h8mail` installa il tool Python **h8mail**; `h8mail -h` mostra l'help/usage del programma (opzioni e comandi disponibili).
`exiftool IMG_4730.jpg` → legge e/o modifica i metadati EXIF del file immagine (data, GPS, modello macchina fotografica, ecc.).

`recon-ng` → avvia il framework Recon-ng (ambiente modulare per OSINT e raccolta informazioni).
`(comandi recon: marketplace search, marketplace refresh, marketplace search bing, marketplace install recon/domains-hosts/bing_domain_web, modules search, options set SOURCE h4cker.org)` → comandi interni di recon-ng:

* `marketplace search` → cerca moduli disponibili nel marketplace;
* `marketplace refresh` → aggiorna l'indice del marketplace;
* `marketplace search bing` → cerca moduli correlati a Bing;
* `marketplace install recon/domains-hosts/bing_domain_web` → installa il modulo specificato;
* `modules search` → cerca moduli installati/disp.;
* `options set SOURCE h4cker.org` → imposta l'opzione SOURCE di un modulo su `h4cker.org`.

`nmap -sS 192.168.88.251` → TCP SYN scan: tentativo veloce di scoperta porte TCP aperte (meglio conosciuto come "SYN scan").
`nmap -sT 192.168.88.251` → TCP connect scan: effettua connessione completa TCP per identificare porte aperte.
`nmap -sU -p 53 192.168.88.251` → UDP scan sulla porta 53 (DNS) per verificare servizi UDP attivi su quella porta.
`nmap -sF -p 80 192.168.88.251` → FIN scan sulla porta 80 (invio pacchetti TCP con flag FIN per tentare di rilevare porte aperte/chiuse secondo risposta).
`nmap -sn 192.168.88.0/24` → ping sweep / host discovery: individua quali host sono attivi nella rete senza effettuare scan delle porte.
`nmap --script smb-enum-users.nse 192.168.88.251` → esegue lo script NSE che tenta di enumerare utenti SMB (se il servizio SMB lo consente).
`nmap --script smb-enum-groups.nse --script-args smbusername=vagrant,smbpass=vagrant 192.168.56.3` → esegue script NSE per enumerare gruppi SMB usando credenziali specificate (username/password).
`nmap --script smb-enum-shares.nse -p 445 192.168.88.251` → esegue script per enumerare le condivisioni SMB sulla porta 445.
`nmap -sV --script=http-enum -p 80 192.168.88.251` → rileva versione del servizio (-sV) e usa lo script `http-enum` per scansionare risorse/paths comuni su HTTP (porta 80).
`#nikto -h 192.168.88.251` → (commentato) Nikto è uno scanner web che verifica vulnerabilità/issue conosciute sull'host HTTP indicato.

`sudo samba -V` → mostra la versione installata di Samba (verifica versione del demone Samba).
`enum4linux 192.168.88.251` → tool di enumerazione per server SMB/Windows (recupera info share, utenti, policy, ecc.).
`./enum4linux-ng.py -As 192.168.88.251` → versione/varianti di enum4linux; `-A`/`-s` sono tipicamente opzioni per enumerazioni estese (dettaglio variabile secondo script).
`smbclient -L \\\\192.168.88.251` → lista le condivisioni SMB disponibili sull'host specificato.

`sudo tshark host 192.168.78.142` → avvia tshark (sniffer da linea di comando) filtrando i pacchetti per l'host specificato; mostra traffico catturato in tempo reale.
`(comandi= ls(),  ls(TCP), ls(DNS), explore("dns"), ans, unans = sr(IP(dst='192.168.88.251')/TCP(dport=445,flags='S')), sudo tshark host 192.168.78.142)` → mischia comandi: alcuni sono comandi interattivi (es. funzioni di tshark o Scapy):

* `ls()` / `ls(TCP)` / `ls(DNS)` → in alcuni ambienti (es. Scapy) elencano i layer/protocollo disponibili;
* `explore("dns")` → comando di esplorazione/aiuto su DNS (dipende dall'ambiente);
* `ans, unans = sr(IP(dst='192.168.88.251')/TCP(dport=445,flags='S'))` → in Scapy: invia pacchetti e riceve risposte (ans = risposte ricevute, unans = non risposte).

`netstat -tunap` → mostra connessioni di rete attive e socket (`-t` TCP, `-u` UDP, `-n` numerico, `-a` tutte, `-p` mostra PID/processo).
`sudo netstat -tunap` → stessa cosa ma con privilegi di root (per vedere processi appartenenti ad altri utenti).

